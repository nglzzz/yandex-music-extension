Mu.blocks.register("volume", (function() {
    var $document = $(document),
        SCROLL_STEP = 0.03,
        VOLUME_KEY = "player_volume",
        Storage;

    var Volume = function(node) {
        this.$dom = $(node);
        this.$track = this.$dom.find(".volume__track");
        this.track = this.$track[0];
        this.$filled = this.$dom.find(".volume__filled");
        this.filled = this.$filled[0];

        this.maxHeight = this.track.offsetHeight;

        this.value = -1;

        this.$dom.on("mousedown", ".volume__control", this.onMouseDown.bind(this));
        this.$dom.on("mouseenter", this.onMouseEnter.bind(this));
        this.$dom.on("mouseleave", this.onMouseLeave.bind(this));
    };

    Volume.init = function(di) {
        Storage = Mu.Storage.create("localStorage");
    };

    Volume.prototype.init = function(di) {
        this.player = di.get("player");
        var volume = this.getVolume(true);
        this.$cont = $(this.container);
        this.$icon = this.$cont.find(".volume__icon");
        this.$cont.on("click", ".volume__btn", this.onClick.bind(this));
        this.$cont.on("touchstart.touch-control", this.onTouchDown.bind(this));
        this.onUserPosChange(this.maxHeight * volume);
        this.player.on("volume", this.onPlayerVolume.bind(this));
        this.player.whenReady(this.updateState.bind(this));
    };

    Volume.prototype.updateState = function() {
        $(document.body).toggleClass("no-volume", this.player.isDeviceVolume());
    };

    /** @private */
    Volume.prototype.onClick = function(evt) {
        var player = this.player;
        player.whenReady(function() {
            player.toggleMute();
        });
    };

    Volume.prototype.onTouchDown = function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        evt.stopImmediatePropagation();

        this.$dom.removeClass("volume_closed");
        this.$dom.addClass("volume_open");
        this.changing = true;

        this.$cont.on("touchend.touch-control", this.onTouchUp.bind(this));
        this.$cont.on("touchmove.touch-control", this.onTouchMove.bind(this));

        return false;
    };

    Volume.prototype.onTouchUp = function(evt) {
        this.$dom.removeClass("volume_open");
        this.$dom.addClass("volume_closed");
        this.changing = false;

        this.$cont.off("touchend.touch-control");
        this.$cont.off("touchmove.touch-control");
    };

    Volume.prototype.onTouchMove = function(evt) {
        var touch = evt.originalEvent.changedTouches[0];
        if (!touch) return;
        var pos = 1 - (touch.pageY - this.$track.offset().top) / this.$track.height();
        pos = Math.max(0, Math.min(1, pos));
        this.saveVolume(pos);
    };

    /** @private */
    Volume.prototype.onMouseDown = function(evt) {
        var self = this;
        self.changing = true;
        self.$dom.toggleClass("volume_used", true);
        Mu.dnd(evt, {
            startY: this.$track.offset().top + this.maxHeight,
            onMove: function(evt) {
                self.onUserPosChange(-evt.deltaY);
            },
            onEnd: function(evt, cancelled) {
                self.$dom.toggleClass("volume_used", false);
                self.changing = false;
            }
        });
        evt.preventDefault();
    };

    /** @private */
    Volume.prototype.onMouseEnter = function(evt) {
        if (this.player.isDeviceVolume()) return;
        $document.bind("DOMMouseScroll.volume", this.onScroll.bind(this)); // for FF
        $document.bind("mousewheel.volume", this.onScroll.bind(this)); // for IE, Chorme, Opera
    };

    /** @private */
    Volume.prototype.onMouseLeave = function(evt) {
        $document.unbind(".volume");
    };

    /** @private */
    Volume.prototype.onScroll = function(evt) {
        evt = evt.originalEvent ? evt.originalEvent : evt;
        var delta = evt.detail ? (-1) * evt.detail : evt.wheelDelta; // detail for FF, wheelDelta for others
        var scrollStep = delta < 0 ? -SCROLL_STEP : SCROLL_STEP;
        this.onUserPosChange(this.maxHeight * (this.getVolume() + scrollStep));
        evt.preventDefault();
    };

    /** @private */
    Volume.prototype.onUserPosChange = function(posY) {
        if (posY < 0) {
            posY = 0;
        } else if (posY > this.maxHeight) {
            posY = this.maxHeight;
        }

        var value = posY / this.maxHeight;
        this.saveVolume(value);
    };

    /** @private */
    Volume.prototype.onPlayerVolume = function(_, value) {
        if (this.value !== value) {
            this.value = value;
            this.filled.style.height = Math.round(value * this.maxHeight) + "px";
            this.updateIcon();
        }
    };

    /** @private */
    Volume.prototype.onMuted = function(muted) {
        this.updateIcon();
    };

    /** @private */
    Volume.prototype.getVolume = function(cached) {
        var volumeSaved = cached && parseFloat(Storage.getItem(VOLUME_KEY));
        var volume = cached && !isNaN(volumeSaved) ? volumeSaved : this.player.getVolume();
        return volume;
    };

    /** @private */
    Volume.prototype.saveVolume = function(value) {
        Storage.setItem(VOLUME_KEY, value);
        var player = this.player;
        player.whenReady(function() {
            player.setVolume(value);
        });
    };

    /** @private */
    Volume.prototype.updateIcon = function() {
        var value = this.player.getVolume();
        var muted = value === 0;
        var halfVolume = !muted && value < 0.45;
        this.$icon.toggleClass("volume__icon_mute", muted);
        this.$icon.toggleClass("volume__icon_half", halfVolume);
        this.$icon.attr( "title", ( muted ? i18n("Включить звук") : i18n("Выключить звук") ) + " [0]" )
    };

    return Volume;
})());
